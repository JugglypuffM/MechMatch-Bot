package database.entities;

import bots.platforms.Platform;
import bots.platforms.PlatformFSM;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import logic.states.GlobalState;
import logic.states.LocalState;
import logic.states.StateFSM;


/**
 * Contains all data required for identification of certain client, that sends the messages.
 * Has id generated by associated platform.
 */
@Entity
@Table(name = "clients", schema = "public")
public class Client {
    @Id
    private String platformId;
    private String globalState, localState, login;
    boolean loggedIn;
    private String platform;
    public Client(){}
    public Client(String m_id, String m_platform){
        this.platformId = m_id;
        this.platform = m_platform;
        login = null;
        loggedIn = false;
        globalState = "COMMAND";
        localState = "LOGIN";
    }
    public GlobalState getGlobalState(){
        StateFSM stateFSM = new StateFSM();
        return stateFSM.getGlobalStateMap().get(this.globalState);
    }
    public void setGlobalState(GlobalState m_globalState){
        this.globalState = m_globalState.stringRepresentation();
    }
    public LocalState getLocalState(){
        StateFSM stateFSM = new StateFSM();
        return stateFSM.getLocalStateMap().get(this.localState);
    }
    public void setLocalState(LocalState m_localState){
        this.localState = m_localState.stringRepresentation();
    }
    public String getLogin() {
        return login;
    }
    public void setLogin(String login) {
        this.login = login;
    }
    public String getPlatformId(){
        return platformId;
    }
    public boolean isLoggedIn() {
        return loggedIn;
    }
    public void setLoggedIn(boolean loggedIn) {
        this.loggedIn = loggedIn;
    }
    public void setPlatform(Platform platform) {
        this.platform = platform.stringRepresentation();
    }
    public Platform getPlatform() {
        PlatformFSM platformFSM = new PlatformFSM();
        return platformFSM.getPlatformMap().get(this.platform);
    }
}