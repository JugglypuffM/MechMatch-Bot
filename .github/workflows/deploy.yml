# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI\CD with Maven on VPS

on:
  push:
    branches: [ "master", "CI-CD" ]
  pull_request:
    branches: [ "master", "CI-CD" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B test --file pom.xml
      
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Run command on remote server
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}}
          user: ${{secrets.SSH_USER}}
          private_key: ${{secrets.SSH_PRIVATE_KEY}}
          command: |
            cd ${{ secrets.PROJECT_FOLDER }};
            git checkout master;
            git pull;
            sudo docker stop app db;
            sudo docker rm app db;
            sudo docker rmi bot-app bot-db;
            sudo docker compose -p bot up -d;
  deploy-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/CI-CD'
    steps:
      - name: Run command on remote server
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}}
          user: ${{secrets.SSH_USER}}
          private_key: ${{secrets.SSH_PRIVATE_KEY}}
          command: |
            cd ${{ secrets.PROJECT_FOLDER }};
            git checkout CI-CD;
            git pull;
            sudo docker stop app db;
            sudo docker rm app db;
            sudo docker rmi bot-app bot-db;
            sudo docker compose -p bot up -d;
            git checkout master;
            git pull;
            sudo docker stop app db;
            sudo docker rm app db;
            sudo docker rmi bot-app bot-db;
            sudo docker compose -p bot up -d;